
# Vidé-Grenier Kamer (VGK)

Une plateforme de marketplace complète pour l'achat et la vente de produits d'occasion au Cameroun.

## Fonctionnalités principales

### Utilisateurs CLIENT (Utilisateurs principaux du marketplace)

✅ **Gestion des produits**
- Création/édition/suppression de produits avec images multiples
- Gestion des statuts de produits (BROUILLON, ACTIF, VENDU, etc.)
- Organisation par catégories
- Recherche et filtrage de produits (prix, lieu, état)
- Analytique de produits (suivi des vues, likes)

✅ **Gestion des commandes**
- Passer des commandes avec plusieurs méthodes de paiement
- Suivi de commande (flux PENDING → DELIVERED)
- Commande anonyme/visiteur
- Historique des commandes et mises à jour de statut
- Génération de code de retrait pour la collecte en point

✅ **Communication**
- Chat en temps réel avec acheteurs/vendeurs
- Historique des messages
- Chat de groupe entre utilisateurs (admin, clients, staff)
- Discussion sur les prix et négociations
- Système de notifications (email, SMS, in-app)

✅ **Fonctionnalités personnelles**
- Gestion des favoris/liste de souhaits
- Comparaison de produits
- Recherches sauvegardées
- Tableau de bord personnel avec statistiques
- Gestion de profil avec vérification

✅ **Gamification**
- Système de points de fidélité (Bronze, Argent, Or, Platine)
- Score de confiance basé sur les avis
- Système d'avis et de notation

✅ **Paiement et livraison**
- Méthodes de paiement multiples (Campay, Orange Money, MTN, Cash à la livraison)
- Sélection de point de retrait
- Options de livraison à domicile
- Calcul de commission

### Utilisateurs ADMIN (Administrateurs de la plateforme)

✅ **Gestion des utilisateurs**
- Opérations CRUD complètes pour les utilisateurs
- Gestion de la vérification et du statut des utilisateurs
- Actions en masse (bannir, activer, supprimer)
- Gestion des scores de confiance et points de fidélité

✅ **Gestion des produits**
- Création et gestion de stock admin
- Flux d'approbation/rejet de produits
- Gestion des catégories
- Suivi d'inventaire avec SKUs

✅ **Analytique et rapports**
- Analytique des ventes avec graphiques
- Métriques d'engagement utilisateur
- Suivi des revenus
- Tableaux de bord de performance

✅ **Administration système**
- Gestion des newsletters et envoi en masse
- Gestion du système de notifications
- Configuration du site
- Gestion des modèles d'emails

✅ **Gestion des emplacements**
- Gestion des points de retrait
- Affectation du personnel aux emplacements
- Surveillance de la capacité

### Utilisateurs STAFF (Opérateurs de points de retrait)

✅ **Traitement des commandes**
- Gestion des commandes de retrait
- Mises à jour de statut des commandes
- Interface de service client

✅ **Opérations d'inventaire**
- Réception et organisation des stocks
- Gestion d'inventaire physique
- Surveillance de la capacité des points de retrait

## Nouvelles fonctionnalités

### Système de chat avancé
- **Chat privé** entre acheteurs et vendeurs lié aux produits
- **Chat de groupe** entre administrateurs, clients et staff
- Types de groupes prédéfinis (Admin-Client, Admin-Staff, Client-Staff, Général, Support)
- Partage d'images et de fichiers dans les conversations de groupe
- Notifications en temps réel pour les nouveaux messages
- Gestion des participants (ajout/retrait) dans les groupes
- Interface utilisateur intuitive et responsive

## Technologies utilisées

- **Backend**: Django, Python
- **Frontend**: HTML, CSS (Tailwind CSS), JavaScript
- **Base de données**: PostgreSQL
- **Paiement**: Intégration avec Campay, Orange Money, MTN Money
- **Déploiement**: Docker, Render

## Installation et configuration

### Prérequis
- Python 3.8+
- PostgreSQL
- Node.js et npm (pour Tailwind CSS)

### Installation

1. Cloner le dépôt
```bash
git clone https://github.com/votre-utilisateur/vide-grenier.git
cd vide-grenier
```

2. Créer et activer un environnement virtuel
```bash
python -m venv venv
source venv/bin/activate  # Sur Windows: venv\Scripts\activate
```

3. Installer les dépendances
```bash
pip install -r requirements.txt
npm install
```

4. Configurer les variables d'environnement
```bash
cp env_config.example .env
# Éditer le fichier .env avec vos configurations
```

5. Appliquer les migrations
```bash
python manage.py migrate
```

6. Créer un superutilisateur
```bash
python manage.py createsuperuser
```

7. Lancer le serveur de développement
```bash
python dev.py
```

## Déploiement

Le projet peut être déployé avec Docker en utilisant le fichier docker-compose.yml inclus.

```bash
docker-compose up -d
```

## Licence

Ce projet est sous licence propriétaire. Tous droits réservés.