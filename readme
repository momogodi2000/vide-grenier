
# README.md
# Vidé-Grenier Kamer

Marketplace camerounaise de seconde main - Version 2.5

## Présentation du Projet

Vidé-Grenier Kamer est une marketplace moderne dédiée à l'achat et la vente de produits d'occasion au Cameroun. Elle propose une expérience complète pour les clients, les administrateurs et le staff des points de retrait, avec des fonctionnalités avancées telles que le paiement mobile, le chat en temps réel, la gestion des stocks physiques, et un système de fidélité.

### Types d'utilisateurs
- **Client** : Peut acheter, vendre, laisser des avis, discuter avec les vendeurs, gérer ses commandes et favoris.
- **Administrateur** : Gère la plateforme, les utilisateurs, les produits, les points de retrait, les stocks administratifs et supervise les opérations.
- **Staff Point de Retrait** : Gère les commandes et le stock physique dans les points de retrait, traite les retraits et assure le suivi logistique.

### Principales fonctionnalités
- Authentification sécurisée (2FA, vérification email/téléphone)
- Gestion complète des produits (images multiples, conditions, statuts)
- Paiement mobile (Campay, Orange Money, MTN)
- Commandes et retraits physiques
- Chat temps réel entre acheteurs et vendeurs
- Système d'avis et évaluations
- Notifications temps réel et alertes
- Système de fidélité et niveaux (Bronze, Argent, Or, Platine)
- Analytics et rapports business
- PWA et support offline
- Gestion des stocks administratifs
- Recherche avancée et alertes personnalisées

### Architecture technique
- **Backend** : Django 4.2, Django REST Framework
- **Frontend** : Django Templates, Tailwind CSS
- **Base de données** : PostgreSQL (prod) / SQLite (dev)
- **Cache** : Redis
- **Temps réel** : Django Channels
- **Déploiement** : Render, Docker

### Structure du code
Le projet est organisé en modules clairs :
- `backend/models.py` : Modèles principaux (User, Product, Order, Review, Chat, Notification, etc.)
- `backend/views.py` : Logique métier et API
- `backend/templates/` : Pages HTML pour chaque dashboard et fonctionnalité
- `backend/static/` : Fichiers statiques (CSS, JS, images)
- `vide/settings/` : Configuration Django

### Logique métier
- Les utilisateurs sont typés (`user_type`) et disposent de rôles et permissions adaptés.
- Les produits peuvent être créés par les clients ou ajoutés au stock admin.
- Les commandes sont suivies du paiement à la livraison/retrait.
- Les points de retrait sont gérés par le staff, avec inventaire et suivi des retraits.
- Les avis et évaluations enrichissent la confiance et la transparence.
- Les notifications et alertes assurent la réactivité de la plateforme.

### Démos et Dashboards
- **Client Dashboard** : Suivi des achats, favoris, revenus, produits récents, commandes, notifications, recommandations, fidélité.
- **Admin Dashboard** : Gestion globale, analytics, utilisateurs, produits, stocks, points de retrait.
- **Staff Dashboard** : Gestion des commandes à retirer, inventaire, messages, alertes, statistiques du point.

### Pour aller plus loin
Consultez la documentation, les commandes de gestion, et les exemples d'utilisateurs de test pour explorer toutes les fonctionnalités.

## 🚀 Installation et Configuration

### Prérequis
- Python 3.11+
- PostgreSQL 15+ (production)
- Redis 7+ (production)
- Git

### Installation Rapide

1. **Cloner le projet**
```bash
git clone <repo-url>
cd vide-grenier-kamer
```

2. **Créer l'environnement virtuel**
```bash
python -m venv vide_grenier_env
source vide_grenier_env/bin/activate  # Linux/Mac
# ou
vide_grenier_env\Scripts\activate  # Windows
```

3. **Installer les dépendances**
```bash
pip install -r requirements.txt
```

4. **Configuration**
```bash
cp .env.example .env
# Modifier .env avec vos paramètres
```

5. **Setup complet automatique**
```bash
python manage.py setup_vgk
```

6. **Démarrer le serveur**
```bash
python manage.py runserver
```

### Utilisateurs de Test

**Administrateurs:**
- admin@vgk.com / AdminVGK2025!
- superadmin@vgk.com / AdminVGK2025!

**Clients de test:**
- alice.douala@gmail.com / TestVGK2025!
- bob.yaounde@gmail.com / TestVGK2025!
- claire.bafoussam@gmail.com / TestVGK2025!
- david.garoua@gmail.com / TestVGK2025!
- emma.bamenda@gmail.com / TestVGK2025!

## 📚 Documentation

### URLs Principales
- 🏠 Accueil: `/`
- 🔐 Connexion: `/auth/login/`
- 📊 Dashboard: `/dashboard/`
- 🛍️ Produits: `/products/`
- ⚙️ Admin: `/admin/`

### Commandes Utiles
```bash
# Créer des utilisateurs de test
python manage.py create_test_users --with-demo-data

# Peupler les catégories
python manage.py populate_categories

# Setup complet
python manage.py setup_vgk

# Migrations
python manage.py makemigrations
python manage.py migrate

# Collecter les statiques
python manage.py collectstatic
```

## 🏗️ Architecture

### Structure du Projet
```
vide/
├── manage.py
├── requirements.txt
├── .env
├── vide/
│   ├── settings/
│   ├── urls.py
│   ├── wsgi.py
│   └── asgi.py
└── backend/
    ├── models/
    ├── views/
    ├── templates/
    ├── static/
    └── management/
```

### Technologies
- **Backend**: Django 4.2 + DRF
- **Base de données**: PostgreSQL / SQLite
- **Cache**: Redis
- **Frontend**: Django Templates + Tailwind CSS
- **Real-time**: Django Channels
- **Deployment**: Render

## 🎯 Fonctionnalités

- ✅ Authentification complète avec 2FA
- ✅ Gestion produits avec images multiples
- ✅ Système de paiement mobile (Campay, Orange Money, MTN)
- ✅ Chat temps réel entre acheteurs/vendeurs
- ✅ Système d'avis et évaluations
- ✅ Points de retrait physiques
- ✅ Dashboard admin complet
- ✅ PWA avec support offline
- ✅ Notifications temps réel
- ✅ Système de fidélité
- ✅ Analytics intégrés

## 🚀 Déploiement

### Render (Production)
1. Connecter le repository GitHub
2. Configurer les variables d'environnement
3. Déployer automatiquement

### Docker (Développement)
```bash
docker-compose up -d
```

## 📞 Support

Pour toute question ou problème:
- 📧 Email: support@videgrenier-kamer.com
- 📱 WhatsApp: +237 694 63 84 12

---

**Vidé-Grenier Kamer** - *Vendez, Achetez, Économisez – Simplicité et Sécurité*