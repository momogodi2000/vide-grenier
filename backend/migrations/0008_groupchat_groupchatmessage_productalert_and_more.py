# Generated by Django 5.2.4 on 2025-07-25 07:09

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('backend', '0007_advanced_features'),
    ]

    operations = [
        migrations.CreateModel(
            name='GroupChat',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('type', models.CharField(choices=[('ADMIN_CLIENT', 'Admin-Client'), ('ADMIN_STAFF', 'Admin-Staff'), ('CLIENT_STAFF', 'Client-Staff'), ('GENERAL', 'Général'), ('SUPPORT', 'Support')], default='GENERAL', max_length=20)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'group_chats',
                'ordering': ['-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='GroupChatMessage',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('message_type', models.CharField(choices=[('TEXT', 'Texte'), ('IMAGE', 'Image'), ('FILE', 'Fichier'), ('SYSTEM', 'Message système')], default='TEXT', max_length=10)),
                ('content', models.TextField()),
                ('image', models.ImageField(blank=True, null=True, upload_to='chat/group_images/')),
                ('file', models.FileField(blank=True, null=True, upload_to='chat/group_files/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'group_chat_messages',
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='ProductAlert',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('visitor_email', models.EmailField(blank=True, max_length=254)),
                ('visitor_phone', models.CharField(blank=True, max_length=20)),
                ('alert_type', models.CharField(choices=[('PRICE_DROP', 'Price Drop'), ('BACK_IN_STOCK', 'Back in Stock'), ('NEW_SIMILAR', 'New Similar Product')], default='PRICE_DROP', max_length=20)),
                ('target_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('triggered_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'product_alerts',
            },
        ),
        migrations.CreateModel(
            name='ProductComment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('visitor_name', models.CharField(blank=True, max_length=100)),
                ('visitor_email', models.EmailField(blank=True, max_length=254)),
                ('visitor_ip', models.GenericIPAddressField(blank=True, null=True)),
                ('content', models.TextField()),
                ('is_approved', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'product_comments',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ProductLike',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('visitor_ip', models.GenericIPAddressField(blank=True, null=True)),
                ('session_key', models.CharField(blank=True, max_length=100)),
                ('like_type', models.CharField(choices=[('LIKE', 'Like'), ('DISLIKE', 'Dislike')], max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'product_likes',
            },
        ),
        migrations.CreateModel(
            name='ProductReport',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('reporter_ip', models.GenericIPAddressField()),
                ('reporter_email', models.EmailField(blank=True, max_length=254)),
                ('report_type', models.CharField(choices=[('FAKE', 'Produit contrefait'), ('INAPPROPRIATE', 'Contenu inapproprié'), ('MISLEADING', 'Description trompeuse'), ('OVERPRICED', 'Prix excessif'), ('SPAM', 'Spam/Publicité'), ('DUPLICATE', 'Annonce dupliquée'), ('BROKEN', 'Produit défectueux'), ('OTHER', 'Autre')], max_length=20)),
                ('description', models.TextField()),
                ('status', models.CharField(choices=[('PENDING', 'En attente'), ('REVIEWING', "En cours d'examen"), ('RESOLVED', 'Résolu'), ('DISMISSED', 'Rejeté')], default='PENDING', max_length=20)),
                ('admin_notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'product_reports',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='VisitorCart',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('session_key', models.CharField(max_length=100, unique=True)),
                ('visitor_name', models.CharField(blank=True, max_length=100)),
                ('visitor_email', models.EmailField(blank=True, max_length=254)),
                ('visitor_phone', models.CharField(blank=True, max_length=20)),
                ('delivery_method', models.CharField(choices=[('PICKUP', 'Retrait en point'), ('DELIVERY', 'Livraison à domicile')], default='PICKUP', max_length=20)),
                ('delivery_address', models.TextField(blank=True)),
                ('notes', models.TextField(blank=True)),
                ('whatsapp_preferred', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'visitor_carts',
            },
        ),
        migrations.CreateModel(
            name='VisitorCartItem',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('quantity', models.PositiveIntegerField(default=1)),
                ('unit_price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('added_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'visitor_cart_items',
            },
        ),
        migrations.CreateModel(
            name='VisitorCompare',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('session_key', models.CharField(max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'visitor_compares',
            },
        ),
        migrations.CreateModel(
            name='VisitorFavorite',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('session_key', models.CharField(max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'visitor_favorites',
            },
        ),
        migrations.RemoveConstraint(
            model_name='cartitem',
            name='unique_cart_product',
        ),
        migrations.RemoveConstraint(
            model_name='installmentpayment',
            name='unique_plan_installment',
        ),
        migrations.RemoveConstraint(
            model_name='productrecommendation',
            name='unique_user_product_recommendation',
        ),
        migrations.RemoveConstraint(
            model_name='staffperformance',
            name='unique_staff_performance_date',
        ),
        migrations.RemoveConstraint(
            model_name='userfollow',
            name='unique_user_follow',
        ),
        migrations.RemoveConstraint(
            model_name='wishlistitem',
            name='unique_wishlist_product',
        ),
        migrations.RenameIndex(
            model_name='userbehavior',
            new_name='user_behavi_user_id_0de0fc_idx',
            old_name='user_behaviors_user_action_created_idx',
        ),
        migrations.RenameIndex(
            model_name='userbehavior',
            new_name='user_behavi_product_e2cee3_idx',
            old_name='user_behaviors_product_action_idx',
        ),
        migrations.AlterUniqueTogether(
            name='cartitem',
            unique_together={('cart', 'product')},
        ),
        migrations.AlterUniqueTogether(
            name='installmentpayment',
            unique_together={('plan', 'installment_number')},
        ),
        migrations.AlterUniqueTogether(
            name='productrecommendation',
            unique_together={('user', 'product', 'recommendation_type')},
        ),
        migrations.AlterUniqueTogether(
            name='staffperformance',
            unique_together={('staff_member', 'date')},
        ),
        migrations.AlterUniqueTogether(
            name='userfollow',
            unique_together={('follower', 'following')},
        ),
        migrations.AlterUniqueTogether(
            name='wishlistitem',
            unique_together={('wishlist', 'product')},
        ),
        migrations.AddField(
            model_name='groupchat',
            name='creator',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_group_chats', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='groupchat',
            name='participants',
            field=models.ManyToManyField(related_name='group_chats', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='groupchatmessage',
            name='group_chat',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='group_messages', to='backend.groupchat'),
        ),
        migrations.AddField(
            model_name='groupchatmessage',
            name='read_by',
            field=models.ManyToManyField(blank=True, related_name='read_group_messages', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='groupchatmessage',
            name='sender',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_group_messages', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='productalert',
            name='product',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='alerts', to='backend.product'),
        ),
        migrations.AddField(
            model_name='productalert',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='product_alerts', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='productcomment',
            name='parent',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='backend.productcomment'),
        ),
        migrations.AddField(
            model_name='productcomment',
            name='product',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='backend.product'),
        ),
        migrations.AddField(
            model_name='productcomment',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='comments', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='productlike',
            name='product',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='likes', to='backend.product'),
        ),
        migrations.AddField(
            model_name='productlike',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='product_likes', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='productreport',
            name='product',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reports', to='backend.product'),
        ),
        migrations.AddField(
            model_name='productreport',
            name='resolved_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resolved_reports', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='visitorcartitem',
            name='cart',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='backend.visitorcart'),
        ),
        migrations.AddField(
            model_name='visitorcartitem',
            name='product',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.product'),
        ),
        migrations.AddField(
            model_name='visitorcompare',
            name='product',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='visitor_compares', to='backend.product'),
        ),
        migrations.AddField(
            model_name='visitorfavorite',
            name='product',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='visitor_favorites', to='backend.product'),
        ),
        migrations.AddConstraint(
            model_name='productlike',
            constraint=models.UniqueConstraint(condition=models.Q(('user__isnull', False)), fields=('product', 'user'), name='unique_user_product_like'),
        ),
        migrations.AddConstraint(
            model_name='productlike',
            constraint=models.UniqueConstraint(condition=models.Q(('user__isnull', True)), fields=('product', 'visitor_ip', 'session_key'), name='unique_visitor_product_like'),
        ),
        migrations.AlterUniqueTogether(
            name='visitorcartitem',
            unique_together={('cart', 'product')},
        ),
        migrations.AlterUniqueTogether(
            name='visitorcompare',
            unique_together={('session_key', 'product')},
        ),
        migrations.AlterUniqueTogether(
            name='visitorfavorite',
            unique_together={('session_key', 'product')},
        ),
    ]
