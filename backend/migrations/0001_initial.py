# Generated by Django 5.2.4 on 2025-07-22 04:45

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('phone', models.CharField(max_length=15, unique=True)),
                ('user_type', models.CharField(choices=[('CLIENT', 'Client'), ('ADMIN', 'Administrateur'), ('STAFF', 'Staff Point de Retrait')], default='CLIENT', max_length=10)),
                ('city', models.CharField(blank=True, choices=[('DOUALA', 'Douala'), ('YAOUNDE', 'Yaoundé'), ('BAFOUSSAM', 'Bafoussam'), ('GAROUA', 'Garoua'), ('BAMENDA', 'Bamenda')], max_length=20)),
                ('address', models.TextField(blank=True)),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='users/profiles/')),
                ('is_verified', models.BooleanField(default=False)),
                ('phone_verified', models.BooleanField(default=False)),
                ('trust_score', models.IntegerField(default=100)),
                ('loyalty_points', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_activity', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Utilisateur',
                'verbose_name_plural': 'Utilisateurs',
                'db_table': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('slug', models.SlugField(unique=True)),
                ('description', models.TextField(blank=True)),
                ('icon', models.CharField(blank=True, max_length=50)),
                ('image', models.ImageField(blank=True, null=True, upload_to='categories/')),
                ('is_active', models.BooleanField(default=True)),
                ('order', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='backend.category')),
            ],
            options={
                'verbose_name': 'Catégorie',
                'verbose_name_plural': 'Catégories',
                'db_table': 'categories',
                'ordering': ['order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Chat',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('buyer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='buyer_chats', to=settings.AUTH_USER_MODEL)),
                ('seller', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='seller_chats', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'chats',
                'ordering': ['-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('message_type', models.CharField(choices=[('TEXT', 'Texte'), ('IMAGE', 'Image'), ('OFFER', 'Offre de prix'), ('SYSTEM', 'Message système')], default='TEXT', max_length=10)),
                ('content', models.TextField()),
                ('image', models.ImageField(blank=True, null=True, upload_to='chat/images/')),
                ('offer_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('is_read', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('chat', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='backend.chat')),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_messages', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'messages',
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('type', models.CharField(choices=[('ORDER', 'Commande'), ('PAYMENT', 'Paiement'), ('MESSAGE', 'Message'), ('REVIEW', 'Avis'), ('SYSTEM', 'Système'), ('PROMOTION', 'Promotion')], max_length=20)),
                ('title', models.CharField(max_length=200)),
                ('message', models.TextField()),
                ('data', models.JSONField(blank=True, default=dict)),
                ('is_read', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'notifications',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('order_number', models.CharField(max_length=20, unique=True)),
                ('quantity', models.PositiveIntegerField(default=1)),
                ('total_amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('commission_amount', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('delivery_cost', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('status', models.CharField(choices=[('PENDING', 'En attente'), ('PAID', 'Payé'), ('PROCESSING', 'En traitement'), ('SHIPPED', 'Expédié'), ('DELIVERED', 'Livré'), ('CANCELLED', 'Annulé'), ('REFUNDED', 'Remboursé')], default='PENDING', max_length=20)),
                ('payment_method', models.CharField(choices=[('CAMPAY', 'Campay'), ('ORANGE_MONEY', 'Orange Money'), ('MTN_MONEY', 'MTN Mobile Money'), ('NOUPIA', 'Noupia'), ('CARD', 'Carte bancaire'), ('CASH_ON_DELIVERY', 'Paiement à la livraison')], max_length=20)),
                ('delivery_method', models.CharField(choices=[('PICKUP', 'Retrait en point'), ('DELIVERY', 'Livraison à domicile')], max_length=20)),
                ('delivery_address', models.TextField(blank=True)),
                ('pickup_code', models.CharField(blank=True, max_length=6)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('delivered_at', models.DateTimeField(blank=True, null=True)),
                ('buyer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='orders', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Commande',
                'verbose_name_plural': 'Commandes',
                'db_table': 'orders',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('payment_reference', models.CharField(max_length=100, unique=True)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('status', models.CharField(choices=[('PENDING', 'En attente'), ('PROCESSING', 'En traitement'), ('COMPLETED', 'Complété'), ('FAILED', 'Échoué'), ('CANCELLED', 'Annulé'), ('REFUNDED', 'Remboursé')], default='PENDING', max_length=20)),
                ('provider_response', models.JSONField(default=dict)),
                ('transaction_id', models.CharField(blank=True, max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('order', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='payment', to='backend.order')),
            ],
            options={
                'db_table': 'payments',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PickupPoint',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('city', models.CharField(choices=[('DOUALA', 'Douala'), ('YAOUNDE', 'Yaoundé'), ('BAFOUSSAM', 'Bafoussam'), ('GAROUA', 'Garoua'), ('BAMENDA', 'Bamenda')], max_length=20)),
                ('address', models.TextField()),
                ('phone', models.CharField(max_length=15)),
                ('email', models.EmailField(max_length=254)),
                ('opening_hours', models.JSONField(default=dict)),
                ('capacity', models.PositiveIntegerField(default=100)),
                ('current_stock', models.PositiveIntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('manager', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'pickup_points',
                'ordering': ['city', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200)),
                ('slug', models.SlugField(unique=True)),
                ('description', models.TextField()),
                ('price', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(1000), django.core.validators.MaxValueValidator(50000000)])),
                ('condition', models.CharField(choices=[('NEUF', 'Neuf'), ('EXCELLENT', 'Excellent état'), ('BON', 'Bon état'), ('CORRECT', 'État correct'), ('USAGE', 'Très usagé')], max_length=20)),
                ('source', models.CharField(choices=[('CLIENT', 'Article Client'), ('ADMIN', 'Stock Admin')], default='CLIENT', max_length=10)),
                ('status', models.CharField(choices=[('DRAFT', 'Brouillon'), ('ACTIVE', 'Actif'), ('SOLD', 'Vendu'), ('RESERVED', 'Réservé'), ('EXPIRED', 'Expiré'), ('SUSPENDED', 'Suspendu')], default='ACTIVE', max_length=20)),
                ('is_negotiable', models.BooleanField(default=True)),
                ('city', models.CharField(choices=[('DOUALA', 'Douala'), ('YAOUNDE', 'Yaoundé'), ('BAFOUSSAM', 'Bafoussam'), ('GAROUA', 'Garoua'), ('BAMENDA', 'Bamenda')], max_length=20)),
                ('views_count', models.PositiveIntegerField(default=0)),
                ('likes_count', models.PositiveIntegerField(default=0)),
                ('is_featured', models.BooleanField(default=False)),
                ('is_premium', models.BooleanField(default=False)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='products', to='backend.category')),
                ('seller', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='products_sold', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Produit',
                'verbose_name_plural': 'Produits',
                'db_table': 'products',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='order',
            name='product',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.product'),
        ),
        migrations.AddField(
            model_name='chat',
            name='product',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chats', to='backend.product'),
        ),
        migrations.CreateModel(
            name='AdminStock',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('sku', models.CharField(max_length=50, unique=True)),
                ('quantity', models.PositiveIntegerField(default=1)),
                ('location', models.CharField(choices=[('DOUALA', 'Douala'), ('YAOUNDE', 'Yaoundé'), ('BAFOUSSAM', 'Bafoussam'), ('GAROUA', 'Garoua'), ('BAMENDA', 'Bamenda')], max_length=20)),
                ('shelf_location', models.CharField(blank=True, max_length=100)),
                ('purchase_price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('condition_notes', models.TextField(blank=True)),
                ('warranty_info', models.TextField(blank=True)),
                ('status', models.CharField(choices=[('AVAILABLE', 'Disponible'), ('RESERVED', 'Réservé'), ('SOLD', 'Vendu'), ('DAMAGED', 'Endommagé'), ('MAINTENANCE', 'En maintenance')], default='AVAILABLE', max_length=20)),
                ('received_date', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('product', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='admin_stock', to='backend.product')),
            ],
            options={
                'db_table': 'admin_stock',
                'ordering': ['location', 'shelf_location'],
            },
        ),
        migrations.CreateModel(
            name='ProductImage',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('image', models.ImageField(upload_to='products/images/')),
                ('alt_text', models.CharField(blank=True, max_length=200)),
                ('is_primary', models.BooleanField(default=False)),
                ('order', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='backend.product')),
            ],
            options={
                'db_table': 'product_images',
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('product_quality', models.IntegerField(choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)])),
                ('seller_communication', models.IntegerField(choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)])),
                ('delivery_speed', models.IntegerField(choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)])),
                ('packaging', models.IntegerField(choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)])),
                ('overall_rating', models.IntegerField(choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)])),
                ('comment', models.TextField()),
                ('images', models.JSONField(blank=True, default=list)),
                ('is_verified', models.BooleanField(default=True)),
                ('helpful_count', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('order', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='review', to='backend.order')),
                ('reviewer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews_given', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'reviews',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='SearchHistory',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('search_term', models.CharField(max_length=200)),
                ('results_count', models.PositiveIntegerField(default=0)),
                ('ip_address', models.GenericIPAddressField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='backend.category')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='search_history', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'search_history',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Analytics',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('metric_type', models.CharField(choices=[('PAGE_VIEW', 'Vue de page'), ('PRODUCT_VIEW', 'Vue produit'), ('SEARCH', 'Recherche'), ('CLICK', 'Clic'), ('CONVERSION', 'Conversion'), ('REVENUE', 'Revenus')], max_length=20)),
                ('session_id', models.CharField(blank=True, max_length=100)),
                ('page_url', models.URLField(blank=True)),
                ('referrer', models.URLField(blank=True)),
                ('user_agent', models.TextField(blank=True)),
                ('ip_address', models.GenericIPAddressField()),
                ('data', models.JSONField(default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'analytics',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['metric_type', 'created_at'], name='analytics_metric__212ff6_idx'), models.Index(fields=['user', 'created_at'], name='analytics_user_id_587798_idx')],
            },
        ),
        migrations.CreateModel(
            name='Favorite',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='favorites', to=settings.AUTH_USER_MODEL)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='favorited_by', to='backend.product')),
            ],
            options={
                'db_table': 'favorites',
                'ordering': ['-created_at'],
                'unique_together': {('user', 'product')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='chat',
            unique_together={('product', 'buyer', 'seller')},
        ),
    ]
